//metaschema-node.js - pre alpha - by hideki yamamoto
var http=require('http'),fs=require('fs'),url=require('url'),path=require("path"),Stream=require('stream'),util=require('util'),MongoClient = require('mongodb').MongoClient;var ObjectID=require('mongodb').ObjectID;
var replaceStream = require('replacestream');
var mime={mp3:'audio/mpeg',wav:'audio/x-wav',html:'text/html',htm:'text/html',xml:'text/xml',txt:'text/plain',js:'text/javascript; charset=utf-8',json:'application/javascript; charset=utf-8'};
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------
var DEFAULTCONFIG={port:8080,ip:'0.0.0.0',dirname:'./static',defaultfile:'index.html',mongoUrl:'mongodb://localhost:27017/metaschema',
	selectParameter:'jselect',findParameter:'meta',
	collectionName:'dat',
	dataParameter:'jdata',pageParameter:'page',separatorParameter:',',urltorecord:{redirect:'/?',parameter:'_id'},
	defaultDB:[
{_id:ObjectID('000000000000000000000000'),_p:ObjectID('000000000000000000000000'),_k:ObjectID('000000000000000000000000'),_owned_by:ObjectID('000000000000000000000009'),created:new Date(),_created_by:ObjectID('000000000000000000000009'),modified:new Date(),_modified_by:ObjectID('000000000000000000000009'),
	name:'root',desc:'default root node',	system:true,url:false,user:[],rel:[],meta:[]},
{_id:ObjectID('000000000000000000000001'),_p:ObjectID('000000000000000000000000'),_k:ObjectID('000000000000000000000000'),_owned_by:ObjectID('000000000000000000000009'),created:new Date(),_created_by:ObjectID('000000000000000000000009'),modified:new Date(),_modified_by:ObjectID('000000000000000000000009'),
	name:'tag',desc:'default tag node',		system:true,url:false,user:[],rel:[],meta:[{n:'c1',v:'#666666',t:'col'},{n:'c2',v:'#000000',t:'col'}]},
{_id:ObjectID('000000000000000000000002'),_p:ObjectID('000000000000000000000000'),_k:ObjectID('000000000000000000000000'),_owned_by:ObjectID('000000000000000000000009'),created:new Date(),_created_by:ObjectID('000000000000000000000009'),modified:new Date(),_modified_by:ObjectID('000000000000000000000009'),
	name:'bin',desc:'default bin node',		system:true,url:false,user:[],rel:[],meta:[]},
{_id:ObjectID('000000000000000000000003'),_p:ObjectID('000000000000000000000000'),_k:ObjectID('000000000000000000000000'),_owned_by:ObjectID('000000000000000000000009'),created:new Date(),_created_by:ObjectID('000000000000000000000009'),modified:new Date(),_modified_by:ObjectID('000000000000000000000009'),
	name:'user',desc:'default user node',	system:true,url:false,user:[],rel:[],meta:[]},
{_id:ObjectID('000000000000000000000009'),_p:ObjectID('000000000000000000000003'),_k:ObjectID('000000000000000000000003'),_owned_by:ObjectID('000000000000000000000009'),created:new Date(),_created_by:ObjectID('000000000000000000000009'),modified:new Date(),_modified_by:ObjectID('000000000000000000000009'),
	name:'admin',desc:'default admin node',	system:true,url:false,user:[],rel:[],meta:[]},
{_id:ObjectID('000000000000000000000010'),_p:ObjectID('000000000000000000000000'),_k:ObjectID('000000000000000000000000'),_owned_by:ObjectID('000000000000000000000009'),created:new Date(),_created_by:ObjectID('000000000000000000000009'),modified:new Date(),_modified_by:ObjectID('000000000000000000000009'),
	name:'doc',desc:'default doc node',	system:true,url:false,user:[],rel:[],meta:[]},
	]
};
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
/*------------  MM  EE  TT  AA  SS  CC  HH  EE  MM  AA  --  MM  EE  TT  AA  NN  OO  DD  EE  ----------*/
/*----------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------*/
Metaschema={
/*-------------------------------------------------------------------------------------- config utils */
config:DEFAULTCONFIG,metacache:null,aabb:function(a,b){if(a){if(b){for(k in b){a[k]=b[k]}}return a}else{return b}},
apply:function(oo,_next){if(oo){this.config=this.aabb(this.config,oo);}},
addbaserecord:function(O){this.config.defaultDB[this.config.defaultDB.length]=O;},
/*--------------------------------------------------------------------------------------- json to xml */
JSON2xmldoc:function(o,n){return '<?xml version="1.0" encoding="UTF-8"?>\n'+this.o2xml(n,o)},
o2xml:function(n,o){if(Array.prototype.isPrototypeOf(o)){return this.a2xml(n,o);}else if(typeof(o)=='object'){return this._o2xml(n,o);}else{return this.v2xml(n,o);}},
_o2xml:function(n,o){if(n.indexOf('_')==0){n=n.substr(1);return '<'+n+'>'+o+'</'+n+'>'}var xml='<'+n+'>';var pr;
 for(var prop in o){pr=prop;if(!isNaN(prop)){pr='x'+pr}if(Array.prototype.isPrototypeOf(o[prop])){xml+=this.a2xml(pr,o[prop]);}else if(typeof(o[prop])=='object'){xml+=this._o2xml(pr,o[prop]);}else{xml+=this.v2xml(pr,o[prop]);}}return xml+'</'+n+'>';},
a2xml:function(n,a){var xml='';for(var i=0;i<a.length;i++){if(Array.prototype.isPrototypeOf(a[i])){xml+=this.a2xml(n,a[i]);}else if(typeof(a[i]=='object')){xml+=this._o2xml(n,a[i]);}else{xml+=this.v2xml(n,a[i]);}}return xml;},
v2xml:function(n,v){if(typeof(v)=='function'){return ''}var cd=false;if(typeof(v)=='string'){cd=true;}if(cd){return '<'+n+'><![CDATA['+v+']]></'+n+'>';}else{return '<'+n+'>'+v+'</'+n+'>';}},
/*-------------------------------------------------------------------------------- context adaptation */
fwd:function(req,res,next,hdr){res.jsonout={requested:req.originalUrl,serveroutput:[]};if(!req.uri){req.uri=url.parse(req.url);}
	if(!req.query){req.query={};var qq=req.uri.query;if(qq){if(qq!=''){qq=qq.trim('?');qq=qq.split('&');var pp='';
		for(var q=0;q<qq.length;q++){pp=qq[q].split('=');req.query[pp[0]]=decodeURIComponent(pp[1])}
	}}}if(!req.body){req.body={}}
	if(!req.item){req.item=function(key){if(req.query[key]){return req.query[key]}if(req.body[key]){return req.body[key]}return null};}
	if(!res.redirect){res.redirect=function(target){this.writeHead(301,{Location:target});this.end();};}
	res.metahead=function(mime,size){if(!mime){mime='text/plain'};var hh={'Content-Type': mime};if(size){hh['Content-Type']=size}this.writeHead(200,hh);};
	res.metaend=function(o,mime,size){this.metahead(mime,size);this.end(o);};
	res.jend=function(req,res,mtype,message){res.jsonout.serveroutput[res.jsonout.serveroutput.length]={type:mtype,message:message};
		if(req.item('output')=='xml'){res.metaend(Metaschema.JSON2xmldoc(res.jsonout,'response'),'text/xml;');}
		else{res.metaend(JSON.stringify(res.jsonout),'application/json; charset=utf-8');}return false;};
		hdr(req,res,next);},
/*------------------------------------------------------------------------------ find query generator */
findQ:function(req){var Q={};Q=Metaschema.findid(req,Q,'id');Q=Metaschema.findid(req,Q,'p');Q=Metaschema.findid(req,Q,'k');
	q=req.item('rel');if(q){Q.rel=q}q=req.item('role');if(q){Q.role=q}var qq;var qi=0;
	if(Q.rel){var rr=[];qq=Q.rel.split(',');for(qi=0;qi<qq.length;qi++){if(qq[qi]!=''){rr[rr.length]=ObjectID(qq[qi])}}Q.rel={$elemMatch:{key:{$in:rr}}}}
	if(Q.role){var rgx=new RegExp('.*'+Q.role.replace(/ /g,'.*')+'.*');if(!Q.rel){Q.rel={$elemMatch:{r:rgx}}}else{Q.rel.$elemMatch.r=rgx}delete Q.role;}
	/*TODO:created + owned + modified[list]*/
	q=req.item(Metaschema.config.findParameter);
	if(q){var O;try{O=JSON.parse(q);Q.meta=O}catch(ex){O=false;return res.jend(req,res,'error','could not parse meta json');}}
	return Q;},
findid:function(req,Q,prop){var _prop='_'+prop;var q=req.item(prop);if(!q){return Q}
	if(q.indexOf(Metaschema.config.separatorParameter)<0){Q[_prop]=ObjectID(q);return Q}
	else{var qq=q.split(Metaschema.config.separatorParameter);var rr=[];
		for(var r=0;r<qq.length;r++){if(qq[r]){if(qq[r]!=''){rr[rr.length]=ObjectID(qq[r])}}}
		Q[_prop]={$in:rr};return Q;}},
/*------------------------------------------------------------------------------- set query generator */
setQ:function(req){var Q={};
	var q=req.item('_p');
	return Q;},
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------ GET SERVICE
//------------------------------------------------------------------------------------------------------
get:function(req,res,next){
	//TODO:ensure accesslevel for query (visible,...)
	var Q=Metaschema.findQ(req);res.jsonout.getquery=Q;
	var pQ=req.item('view');
	if(!pQ){pQ=false}else if(pQ=='autocomplete'){pQ={_id:1,name:1}}
	else{try{pQ=JSON.parse(pQ)}catch(ex){pQ=false;return res.jend(req,res,'error',' error parsing JSON - view parameter must be \'autocomplete\' or some JSON string');}}
	//----------------------------------------------------------------------------------- query execution
	if(Q){MongoClient.connect(Metaschema.config.mongoUrl,function(err,db){												if(err){				 return res.jend(req,res,'error',err);}		
		db.collection(Metaschema.config.collectionName).find(Q,pQ).toArray(function(err,rows){															db.close();if(err){return res.jend(req,res,'error',err);}
			res.jsonout.doc=rows;res.jend(req,res,'success','command was executed');
});});}},
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------ SET SERVICE
//------------------------------------------------------------------------------------------------------
set:function(req,res){		
	return res.metaend(JSON.stringify({requested:req.originalUrl,doc:'todo'}), 'application/json; charset=utf-8');
	/*TODO*/
	var fQ=Metaschema.findQ(req);
	var dQ=Metaschema.setQ(req);
	//----------------------------------------------------------------------------------- query execution
MongoClient.connect(Metaschema.config.mongoUrl,function(err,db){															if(err){				 return res.jend(req,res,'error',err);}
	db.collection(Metaschema.config.collectionName).update(fQ,dQ,function(err,rows){db.close();					if(err){return res.jend(req,res,'error',err);}res.jsonout.serveroutput[res.jsonout.serveroutput.length]=rows;
		res.jend(req,res,'confirm','command was executed');
});});
},
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------ ADD SERVICE
//------------------------------------------------------------------------------------------------------
add:function(req,res){
	var Q=JSON.parse(req.getquery(Metaschema.config.dataParameter));
	//TODO:Ensure fields
	if(Q._id){/*eroor*/}
	if(Q._k){Q._k=ObjectID(Q._k);}else{Q._k=ObjectID('000000000000000000000010');}
	if(Q._p){Q._p=ObjectID(Q._p);}else{Q._p=ObjectID('000000000000000000000010');}
	if(Q.created_by){/*always override + warning*/}
	if(Q.modified_by){/*always override + warning*/}
	//TODO:Ensure sec
	//----------------------------------------------------------------------------------- query execution
MongoClient.connect(Metaschema.config.mongoUrl,function(err,db){															if(err){				 return res.jend(req,res,'error',err);}
	db.collection(Metaschema.config.collectionName).insert(Q).toArray(function(err,rows){							db.close();if(err){return res.jend(req,res,'error',err);}res.jsonout.serveroutput[res.jsonout.serveroutput.length]=rows;
		res.jend(req,res,'confirm','command was executed');
});});},
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------ DEL SERVICE
//------------------------------------------------------------------------------------------------------
del:function(req,res){Q=Metaschema.findQ(req);res.jsonout.delquery=Q;
	//----------------------------------------------------------------------------------- query execution
MongoClient.connect(Metaschema.config.mongoUrl,function(err,db){															if(err){				 return res.jend(req,res,'error',err);}
	db.collection(Metaschema.config.collectionName).remove(jq,function(err,rows){										db.close();if(err){return res.jend(req,res,'error',err);}res.jsonout.serveroutput[res.jsonout.serveroutput.length]=rows;
	return res.jend(req,res,'confirm','command was executed');
});});},
//------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------- LINK SERVICE
//------------------------------------------------------------------------------------------------------
link:function(req,res,next){
	var D1=req.item('r1');if(!D1){return res.jend(req,res,'error','Parameter r1 is mandatory');}
	var D2=req.item('r2');if(!D2){return res.jend(req,res,'error','Parameter r2 is mandatory');}
	D1=ObjectID(D1);D2=ObjectID(D2);var J1=false;var J2=false;
	var RL=req.item('role')||'default';/*todo chooose if allow multi rel or not*/
	var vry=req.item('meta');var cName=Metaschema.config.collectionName;
	//----------------------------------------------------------------------------------- query execution
MongoClient.connect(Metaschema.config.mongoUrl,function(err,db){															if(err){				 return res.jend(req,res,'error',err);}
 db.collection(cName).find({_id:D1}).toArray(function(err,rows){															if(err){db.close();return res.jend(req,res,'error',err);}res.jsonout.serveroutput[res.jsonout.serveroutput.length]=rows;
  J1=rows[0];db.collection(cName).find({_id:D2}).toArray(function(err,rows){											if(err){db.close();return res.jend(req,res,'error',err);}res.jsonout.serveroutput[res.jsonout.serveroutput.length]=rows;
   J2=rows[0];db.collection(cName).update({_id:D1},{$pull:{rel:{key:D2}}},function(err,rows){					if(err){db.close();return res.jend(req,res,'error',err);}res.jsonout.serveroutput[res.jsonout.serveroutput.length]=rows;
	 db.collection(cName).update({_id:D1},{$push:{rel:{key:D2,n:J2.name,p:J2._p,r:RL}}},function(err,rows){	if(err){db.close();return res.jend(req,res,'error',err);}res.jsonout.serveroutput[res.jsonout.serveroutput.length]=rows;
	  db.collection(cName).update({_id:D2},{$pull:{rel:{key:D1}}},function(err,rows){								if(err){db.close();return res.jend(req,res,'error',err);}res.jsonout.serveroutput[res.jsonout.serveroutput.length]=rows;
		db.collection(cName).update({_id:D2},{$push:{rel:{key:D1,n:J1.name,p:J1._p,r:RL}}},function(err,rows){db.close();if(err){return res.jend(req,res,'error',err);}res.jsonout.serveroutput[res.jsonout.serveroutput.length]=rows;
		 return res.jend(req,res,'confirm','command was executed');
});});});});});});});},
//------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------- UNLINK SERVICE
//------------------------------------------------------------------------------------------------------
unlink:function(req,res,next){
	var vr1=req.item('r1');if(!vr1){return res.jend(req,res,'error','Parameter r1 is mandatory');}
	var vr2=req.item('r2');if(!vr2){return res.jend(req,res,'error','Parameter r2 is mandatory');}
	vr1=ObjectID(vr1);vr2=ObjectID(vr2);var jr1=false;var jr2=false;
	var vrr=req.item('role')||'default';/*todo chooose if allow multi rel or not*/
	var cName=Metaschema.config.collectionName;
	//----------------------------------------------------------------------------------- query execution
MongoClient.connect(Metaschema.config.mongoUrl,function(err,db){						  									if(err){				 return res.jend(req,res,'error',err);}
 db.collection(cName).update({_id:vr1},{$pull:{rel:{key:vr2}}},function(err,rows){ 									if(err){db.close();return res.jend(req,res,'error',err);}res.jsonout.serveroutput[res.jsonout.serveroutput.length]=rows;
  db.collection(cName).update({_id:vr2},{$pull:{rel:{key:vr1}}},function(err,rows){									db.close();if(err){return res.jend(req,res,'error',err);}res.jsonout.serveroutput[res.jsonout.serveroutput.length]=rows;
	return res.jend(req,res,'confirm','command was executed');
});});});},
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------- DB RESET SERVICE
//------------------------------------------------------------------------------------------------------
	reset:function(req,res,next){var cName=Metaschema.config.collectionName;
MongoClient.connect(Metaschema.config.mongoUrl,function(err,db){															if(err){				 return res.jend(req,res,'error',err);}
//	db.collection('user').drop(function(err,rows){																				if(err){db.close();return res.jend(req,res,'error',err);}res.jsonout.serveroutput[res.jsonout.serveroutput.length]=rows;
	db.collection(cName).drop(function(err,rows){																				res.jsonout.serveroutput[res.jsonout.serveroutput.length]=rows;
		/*db.createCollection('user',function(err,rows){																			if(err){db.close();return res.jend(req,res,'error',err);}res.jsonout.serveroutput[res.jsonout.serveroutput.length]=rows;
			res.jsonout.id_admin=new ObjectID();var idadmin=res.jsonout.id_admin;	
			db.collection('user').insert([
{_id:idadmin,name:'admin',apikey:'admin',desc:'default administrative account',system:true},
{name:'anonymous',apikey:'anonymous',desc:'default anonymous account',system:true}],function(err,rows){		if(err){db.close();return res.jend(req,res,'error',err);}res.jsonout.serveroutput[res.jsonout.serveroutput.length]=rows;
				*/
				db.createCollection(cName,function(err,rows){																	if(err){db.close();return res.jend(req,res,'error',err);}res.jsonout.serveroutput[res.jsonout.serveroutput.length]=rows;
					db.collection(cName).insert(Metaschema.config.defaultDB,function(err,rows){						db.close();if(err){return res.jend(req,res,'error',err);}res.jsonout.serveroutput[res.jsonout.serveroutput.length]=rows;
							/*todo:create indexes*/
							//todo:loc : { type: "Point", coordinates: [ -73.88, 40.78 ] }
							//todo:createindex for parent
							//todo:createindex for relsid
							//todo:createindex for relsparent		
							fs.writeFile('metaschema.json', 'Just now, we have created this file', function(err){	if(err){return res.jend(req,res,'error',err);}
								res.jend(req,res,'success','database was reset');
							});							
	/*db.createCollection('metacache',function(err){if(err){db.close();throw err}
	db.collection('metacache').insert([res.jout],function(err){
});});*/
//});});});
});});});});},
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------ METAFRAME SERVICE
//------------------------------------------------------------------------------------------------------
metaframe:function(req,res){
   var fn=req.item(Metaschema.config.pageParameter);
	  fn='./'+fn;var st=fs.statSync(fn);if(!st.isDirectory()){var ext=path.extname(fn);
	  if(mime[ext]){res.set('Content-Type',mime[ext]);}
	  var json=req.body[Metaschema.config.dataParameter];if(!json){json=req.query[Metaschema.config.dataParameter]}
	  fs.createReadStream(fn).pipe(replaceStream('%jsondata',json)).pipe(res);
	}else{res.jend(req,res,'error','page must be a file');}
},
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------- POSTBACK SERVICE
//------------------------------------------------------------------------------------------------------
postback:function(req,res){
	var out='<!DOCTYPE html><head><title>postback</title></head><body>';out+='<h3>headers</h3>\n';
	for (key in req.headers){out+=key+':'+req.headers[key]+'<br/>';}out+='<h3>querystring</h3>\n';
	for (key in req.query){out+=key+':'+req.query[key]+'<br/>';}out+='<h3>files</h3>\n';
	for (key in req.files){out+=key+':'+req.files[key]+'<br/>';}out+='<h3>form</h3>\n';
	for (key in req.body){out+=key+':'+req.body[key]+'<br/>';}out+='</body></html>';
	res.writeHead(200,{'Content-Type':'text/html'});res.end(out);},
//------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------- STATIC SERVER SERVICE
//------------------------------------------------------------------------------------------------------
	servestatic:function(req,res,next){var fn=path.join(Metaschema.config.dirname,req.uri.pathname);
		if(fs.existsSync(fn)){var st=fs.statSync(fn);var flag=true;
			if(st.isDirectory()){flag=false;
				if(Metaschema.config.defaultfile){fn=path.join(fn,Metaschema.config.defaultfile);if(fs.existsSync(fn)){flag=true;st=fs.statSync(fn);}}}
			if(flag){var ext=path.extname(fn);res.metahead(mime[ext],st['size']);fs.createReadStream(fn).pipe(res);
			}else{next()}
		}else{next()}},
//------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------- URL TO RECORD SERVICE
//------------------------------------------------------------------------------------------------------
urltorecord:function(req,res,next){var cName=Metaschema.config.collectionName;
	if(req.uri.pathname=='/'){return next()}var uuu=req.uri.pathname.substr(1).split('/');
	MongoClient.connect(Metaschema.config.mongoUrl,function(err,db){														if(err){				 return res.jend(req,res,'error',err);}
		res.db=db;res.db.collection(cName).find({url:req.uri.originalQuery}).toArray(function(err,rows){		if(err){db.close();return res.jend(req,res,'error',err);}
		if(rows.length==1){res.redirect(Metaschema.config.urltorecord.redirect+'&'+Metaschema.config.urltorecord.parameter+'='+rows[0]._id);}
		else{res.db.collection(cName).find({url:uuu[uuu.length-1]}).toArray(function(err,rows){					if(err){db.close();return res.jend(req,res,'error',err);}
			if(rows.length==1){res.redirect(Metaschema.config.urltorecord.redirect+'&'+Metaschema.config.urltorecord.parameter+'='+rows[0]._id);}
			else if(rows.length==0){next();/*exit*/}else{res.leftjobs=rows.length;res.dbjobs=[];
				for(var n=0;n<rows.length;n++){res.dbjobs[n]={id:rows[n]._p,uu:uuu,lev:uuu.length-1,result:'/'+rows[n].url,original:rows[n]._id}
this._recursefindandserve(req,res,next,n)}}})}})})},
_recursefindandserve:function(req,res,next,jobidx){res.db.collection(Metaschema.config.collectionName)
	.find({_id:res.dbjobs[jobidx].id}).toArray(function(err,rows){															if(err){db.close();return res.jend(req,res,'error',err);}
	res.dbjobs[jobidx].lev=res.dbjobs[jobidx].lev-1;
		if(rows.length==0){Metaschema._finishedfindone(req,res,next,jobidx)}
		else{if(rows[0].url){if(rows[0].url!=''){res.dbjobs[jobidx].result='/'+rows[0].url+res.dbjobs[jobidx].result}}
			if(rows[0].url!=res.dbjobs[jobidx].uu[res.dbjobs[jobidx].lev]){Metaschema._finishedfindone(req,res,next,jobidx)}
			else{if((rows[0]._p==0)&&(rows[0]._id==0)){Metaschema._finishedfindone(req,res,next,jobidx);}else{
				if(res.dbjobs[jobidx].lev>0){res.dbjobs[jobidx].id=rows[0]._p;Metaschema._recursefindandserve(req,res,next,jobidx)}
				else{Metaschema._finishedfindone(req,res,next,jobidx)}}}}})},
_finishedfindone:function(req,res,next,jobidx){res.leftjobs--;if(res.leftjobs==0){res.db.close();var flag=false;
	for(var j=0;j<res.dbjobs.length;j++){if(req.uri.pathname==res.dbjobs[j].result){flag=true;res.redirect(Metaschema.config.urltorecord.redirect+'&'+Metaschema.config.urltorecord.parameter+'='+res.dbjobs[j].original)}}
if(!flag){next()/*exit*/}}}
};
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------ CLASSES FOR NATIVE MODE
//------------------------------------------------------------------------------------------------------
Metaschema.Handler=function(req,res,handlers){this.req=req;this.res=res;this.handlers=handlers;this.index=-1;this.mindex=handlers.length;};Metaschema.Handler.prototype={
	next:function(){var self=this;this.index++;if(this.index<this.mindex){var flag=false;
		if(this.handlers[this.index].k=='regex'){flag=this.handlers[this.index].e.test(this.req.uri.pathname)}
		else if(this.handlers[this.index].k=='string'){flag=(this.handlers[this.index].e==this.req.uri.pathname)}
		if(flag){this.handlers[this.index].h(this.req,this.res,function(){self.next()});}
		else{this.next();}}else{this.res.end("no module matched the request");}}};
Metaschema.App=function(){this.handlers=[];this.handler=false;this.name='appname'};Metaschema.App.prototype={
	start:function(done){this.server=http.createServer(this.process());this.server.listen(Metaschema.config.port,Metaschema.config.ip);},
	all:function(E,H){if(!E){throw new Error('first and second paramters are mandatory')}
		var K=false;if(RegExp.prototype.isPrototypeOf(E)){K='regex'}else if(String.prototype.isPrototypeOf(E)){K='string'}
		if(K){this.handlers[this.handlers.length]={e:E,k:K,h:H}}else{throw new Error('unsupported format passed to Metaschema.App.all')
}	},
	process:function(req,res,next){var self=this;return function(req,res){Metaschema.fwd(req,res,next,self._process());}},
	_process:function(){var self=this;return function(req,res){var H=new Metaschema.Handler(req,res,self.handlers);H.next();}}
};
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------- MIDDLEWARE BEGIN
//------------------------------------------------------------------------------------------------------
Metaschema.express={apply:function(oo){Metaschema.apply(oo)},
				addbaserecord:function(oo){Metaschema.addbaserecord(oo)},
		  get:function(req,res,next){Metaschema.fwd(req,res,next,Metaschema.get)},
		  set:function(req,res,next){Metaschema.fwd(req,res,next,Metaschema.set)},
		  add:function(req,res,next){Metaschema.fwd(req,res,next,Metaschema.add)},
		  del:function(req,res,next){Metaschema.fwd(req,res,next,Metaschema.del)},
	    link:function(req,res,next){Metaschema.fwd(req,res,next,Metaschema.link)},
		reset:function(req,res,next){Metaschema.fwd(req,res,next,Metaschema.reset)},
	  unlink:function(req,res,next){Metaschema.fwd(req,res,next,Metaschema.unlink)},
	postback:function(req,res,next){Metaschema.fwd(req,res,next,Metaschema.postback)},
  metaframe:function(req,res,next){Metaschema.fwd(req,res,next,Metaschema.metaframe)},
servestatic:function(req,res,next){Metaschema.fwd(req,res,next,Metaschema.servestatic)},
urltorecord:function(req,res,next){Metaschema.fwd(req,res,next,Metaschema.urltorecord)}};
//------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------- MODULE END
//------------------------------------------------------------------------------------------------------
module.exports=Metaschema;